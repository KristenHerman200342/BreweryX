# French config translation for BreweryX
# Author:

config:
  language: |
    Fichier de langage utilisé [en]
    Available types: en (English), de (German), es (Spanish), fr (French), it (Italian), ru (Russian), zh (Chinese)
  updateCheck: |
    Enable checking for Updates, Checks the Spigot api for updates to BreweryX [true]
    If an Update is found a Message is logged on Server-start and displayed to OPs joining the game
  autosave: "Autosave interval in minutes [10]"
  pluginPrefix: "Prefix used on messages"
  debug: "Show debug messages in logs [false]"
  storage:
    header: "-- Storage Settings --"
    type: |
      What type of storage to use [FLATFILE]
      Available types: FlatFile, MySQL, SQLite
    database: "The name of the database. When the database is a file, this will be the name of the file. [brewery-data]"
  enableHome: "Si le joueur se réveille à son /home lors de sa connexion après un excès alcool (Un plugin de /home est nécessaire!) [true]"
  homeType: |
    Type de la téléportation /home: ['cmd: home']
    bed = Le joueur se téléportera à son lit de réapparition.
    'cmd: home' = /home sera exécuté par le joueur. Il devra avoir la permission sans le délai pour y parvenir!
    'cmd: spawn' = /spawn sera exécuté par le joueur.
    'cmd: whatever' = /whatever sera exécuté par le joueur. (Peu importe)
  enableWake: |
    Si le joueur se "réveille" à un point aléatoire sur la carte à sa connexion, pendant un excès d'alccol (Les points de réveil doivent être ajoutés avec '/brew Wakeup add' via un administrateur.)
    Le joueur se réveillera aléatoirement parmis les deux points de "réveil" les plus proches de lui [true]
  enableLoginDisallow: "Si le joueur reçoit des connexions refusées au serveur s'il est ivre. [true]"
  enableKickOnOverdrink: "Si le joueur s'évanouit (il sera kické) lorsqu'il boit trop d'alcool [false]"
  enablePuke: |
    Si le joueur vomit en cas d'alcoolémie élevée (Le type d'objet "droppé" est configurable en dessous) [true]
    L'objet ne peut pas être collecté et reste sur le sol jusqu'à ce qu'il disparaisse
  pukeItem: |
    L'objet utilisé pour représenter le vomit [Soul_Sand]
    Can be list of items such as [Soul_sand, Slime_block, Dirt]
  pukeDespawnTime: |
    Time in seconds until the pukeitems despawn, (mc default is 300 = 5 min) [60]
    If the item despawn time was changed in the spigot.yml, the pukeDespawntime changes as well.
  stumblePercent: "How much the Player stumbles depending on the amount of alcohol he drank. Can be set to 0 and higher than 100 [100]"
  showStatusOnDrink: "Display his drunkenness to the player when he drinks a brew or eats a drainItem [true]"
  drainItem: "Consommables Objet/Force. Réduit le montant d'alcool par <Force> lors de la consommation. (list)"
  enableCauldronParticles: |
    Show Particles over Cauldrons when they have ingredients and a heat source. [true]
    The changing color of the particles can help with timing some recipes
  minimalParticles: "If Cauldron Particles should be reduced to the bare minimum [false]"
  craft-enableSealingTable: "If crafting and using of the Brew Sealing Table is enabled (2 Bottles over 4 Planks) [true, true]"
  sealingTableBlock: |
    By default, Brewery uses Smoker as a Sealing Table, this option allows you to change it
    IMPORTANT: It needs to be a container - meaning a block that can store items (e.g., SMOKER, CHEST, BLAST_FURNACE).
  alwaysShowQuality: "Toujours montrer les 1-5 étoiles sur les objets en fonction de leur qualité. S'ils sont faux, ils n'apparaîtront que lors de l'infusion. [true]"
  alwaysShowAlc: "Toujours indiquer la teneur en alcool sur les objets. S'il est false, il n'apparaîtra que dans le stand de brassage. [false]"
  showBrewer: "If we should show who brewed the drink [false]"
  requireKeywordOnSigns: "Si les barils ne sont créés que lorsque le panneau placé contient le mot \"barrel\" (ou une traduction) [true]"
  ageInMCBarrels: "Combien de boissons de brasserie peuvent être mises dans les barils -Minecraft- [6]"
  agingYearDuration: "Durée (en minutes) d'une « année » pour la maturation des boissons [20]"
  commandAliases: |
    Aliases for the '/breweryx' command. Requires a server restart to take effect. (list) [brewery, brew]
  enableEncode: |
    Les ingrédients et autres données de brassage utilisés sont sauvegardés dans tous les articles de brasserie. [false]
    Pour empêcher les clients piratés de lire exactement ce qui a été utilisé pour infuser un élément, les données peuvent être encodées/brouillées.
    Il s'agit d'un processus rapide pour empêcher les joueurs de pirater des recettes, une fois qu'ils mettent la main sur une bière.
    Seul inconvénient: Les boissons brassicoles ne peuvent être utilisés que sur un autre serveur avec la même clé de chiffrement.
    Lorsque vous utilisez des boissons brassicoles sur plusieurs serveurs (BungeeCord), définissez une base de données partagée ci-dessous à "multiServerDB".
    Activez cette option si vous voulez rendre la tricherie des recettes plus difficile, mais ne partagez pas les infusions par téléchargement mondial, schémas ou autres moyens.
  useOtherPlugins: |
    -- Compatibilité entre Plugins --
  
    Activer la vérification des autres plugins (si installés) pour les permissions des tonneaux. [true]
    Plugins 'Landlord' and 'Protection Stones' use the WorldGuard Flag. 'ClaimChunk' is natively supported.
  useVirtualChestPerms: |
    Use a virtual chest when opening a Barrel to check with all other protection plugins
    This could confuse Anti-Cheat plugins, but is otherwise good to use
    use this for 'Residence' Plugin and any others that don't check all cases in the PlayerInteractEvent
  useLogBlock: "Activer l'historique du contenu des tonneaux avec LogBlock [true]"
  useOffhandForCauldron: "If items in Offhand should be added to the cauldron as well [false]"
  loadDataAsync: |
    This option no longer does anything anymore, and will be removed in future releases of BreweryX.
    BreweryX will load data asynchronously always, with the exception of server startup and shutdown.
  hangoverDays: "Temps (en jours) pour que les données d'ivresse restent sauvergardées lorsque le joueur est déconnecté, pour appliquer les effets. [7]"
  colorInBarrels-Brewer: "Colorer les informations d'objets (lore) au dépend de la qualité dans un tonneau et/ou dans un stand de brassage (l'alambic) [true, true]"
  openLargeBarrelEverywhere: "Si le grand tonneau peut être ouvert en cliquant sur n'importe quel bloc, non seulement le robinet ou le panneau. Toujours \"true\" pour les petits tonneaux. [true]"
  brewHopperDump: "Allow emptying brews into hoppers to discard brews while keeping the glass bottle [true]]"
  enableChatDistortion: |
    Si le Chat écrit est déformé quand le joueur est ivre, de sorte qu'il ressemble à un chat bourré en train d'écrire
    Le degré de distorsion du chat dépend de l'état d'ébriété du joueur
    Ci-dessous sont les paramètres pour ce qui et comment les changements dans le chat se produisent
  logRealChat: "Ecrire dans les \"logs\" du serveur ce que le joueur devrait dire, à la place de la distorsion. [false]"
  distortCommands: "Distordre le texte dans le Chat après les commandes spécifiées (list) [- /gl]"
  distortSignText: "Distordre le texte sur les panneaux pendant l'ivresse [false]"
  distortBypass: |
    Entourer les textes avec ces caractères pour ignorer la distorsion (Utilisez "," comme un séparateur) (list) [- '[,]']
    Chat Example: Hello i am drunk *I am testing Brewery*
  words: |
    words: Les mots et les lettres altérées dans le chat lors d'un état d'ivresse.
    Commence du haut jusqu'au bas. Les phrases sont altérées par l'ordre écrit.
  
    replace: Mot ou lettre à remplacer (Spécial: "-space": remplace les espaces, "-random": s'insère dans une position aléatoire, "-all": Toute la ligne, "-start": Au début, "-end": A la fin.)
    to: Ce qui remplacera.
    pre: Les mots et les lettres avant le mot désiré (séparez avec ",")
    match: true = Si un des "Pre-Mots" est nécessaire avant le mot désiré, false = Aucun des "Pre-Mots" n'est autorisé avant le mot désiré.
    alcohol: 1-100 Le montant minimal d'alcool pour que la distorsion fonctionne.
    percentage: Probabilité en pourcentage que le mot soit remplacé.
  useOtherFiles: |
    You may declare custom items, recipes, and cauldron ingredients here too, optionally, but using their respective files is recommended.
    IMPORTANT: custom items, recipes, and cauldron ingredients declared in their proper files will take priority over those declared here! (e.g. 2 recipes with the same name)





recipesFile:
  header: |
    -- Recette pour les boissons --

    name: Différents noms pour la mauvaise/moyen/bonne qualité (Les codes de mise en forme sont pris en charge: comme par exemple &6 pour la couleur Or.)
    ingredients: Liste des 'matériaux/montant'
      Avec un objet en main, utilisez /brew ItemName pour obtenir son matériau pour une recette de cuisine
      (Les id d'objets à la place des matériaux sont obsolètes pour bukkit)
      Ex: 'Sugar_Cane'
      Une liste des matériaux peuvent-être trouvés ici: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html
      Plugin items avec 'plugin:id' (Actuellement supporté ExoticGarden, Slimefun, MMOItems, Brewery)
      Ou un élément personnalisé défini ci-dessus
    cookingtime: Temps en minutes réelles durant lesquelles les ingrédients devront bouillir
    distillruns: Combien de fois le breuvage devra être distillé pour un alcool de qualité (0=Ne pas distiller)
    distilltime: Combien de temps (en secondes) dure une distillation (0=Temps par défaut de 40 secondes) MC Par défaut serait de 20 secondes
    wood: Type de bois du baril 0=aucun 1=Bouleau 2=Chêne 3=Jungle 4=Pin 5=Acacia 6=Chêne Noir 7=Crimson 8=Warped 9=Mangrove 10=Cerisier 11=Bambou (12=Cuivre coupé)
      Le tonneau Minecraft est en chêne.
    age: Temps en jours de Minecraft, la potion devra être âgée dans un baril. 0=Pas besoin d'âge
    color: Couleur de la potion après distillation/avoir laissé vieillir.
      Couleurs disponibles : DARK_RED, RED, BRIGHT_RED, ORANGE, YELLOW, PINK, PURPLE, BLUE, CYAN, WATER, TEAL, OLIVE, GREEN, LIME, BLACK, GREY, BRIGHT_GREY, WHITE
        (Dans l'ordre : Rouge foncé, Rouge, Rouge clair, Orange, Jaune, Rose, Pourpre, Bleu, Cyan, Eau, Sarcelle, Olive, Vert, Vert lime, Noir, Gris, Gris clair, Blanc)
      Ou couleurs RGB (hex: par exemple '99FF33') (avec '') (recherche de "HTML color" sur internet)
    difficulty: 1-10 précision nécessaire pour obtenir une bonne qualité (1 = imprécis/facile, 10 = très précis/difficile)
    alcohol: Le montant d'alcool absolu dans une boisson parfaite (cela sera ajouté directement au joueur, où 100% entraînera l'évanouissement), un degré d'alcooléisme en fait
    lore: Liste des textes supplémentaires sur le breuvage fini. (Codes de formatage possibles : tels que &6)
        Texte spécifique de qualité possible, en utilisant + mauvais, ++ normal, +++ bon, ajouté à l'avant de la ligne.
    servercommands: Liste des commandes exécutées par le -serveur- lors de la consommation de la potion (Peut utiliser %player_name%  %quality%)
    playercommands: Liste des commandes exécutées par le -joueur- lors de la consommation de la potion (Peut utiliser %player_name%  %quality%)
      Texte spécifique de qualité possible, en utilisant + mauvais, ++ normal, +++ bon, ajouté à l'avant de la ligne.
    drinkmessage: Chat-message au joueur lorsqu'il boit la potion
    drinktitle: Titre à l'écran du joueur lorsqu'il boit la potion
    glint: Boolean if the item should have a glint (enchant glint)
    customModelData: Custom Model Data Tag. This is a number that can be used to add custom textures to the item.
      Can specify one for all, or one for each quality, separated by /
    effects: Liste des effets/durée en secondes lors de la consommation.
      Effets posssible: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/potion/PotionEffectType.html
      POUR LES EFFETS EN FONCTIONS DE LA QUALITE : Les Niveaux (I ou II) ou les Intervalles de durées d'effets doivent être spécifiés avec un "-".
        Ex: 'SPEED/1-2/30-40' => Vitesse niveau 1 et durée de 30 sec pour la pire qualité, et niveau 2 et durée de 40 sec pour la meilleure.
        Il est aussi possible de faire l'inverse, c'est à dire que le schéma "Meilleure qualité, meilleur effets" soit "Meilleure qualité, effets moins puissants.
        Cela peut-être utile pour des potions avec l'effet poison pour empoisonner moins avec une bonne qualité.
        Ex: 'POISON/3-1/20-5' => Poison de niveau 3 durant 20 sec à la moins bonne qualité et de niveau 1 et de durée 5 sec à la meilleure.
        Durées possibles maximum: 1638 sec. Les effets instantanés n'ont pas besoin d'avoir une durée spécifiée (Ex : Les potions de Soin instantané).


cauldronFile:
  header: |
    -- Ingrédients dans le chaudron --
    Quels sont les ingrédients acceptés par le chaudron et la potion de base qui en résulte
    Il vous suffit d'ajouter quelque chose ici si vous voulez spécifier un nom ou une couleur pour la potion de base

    name: Nom de la potion de base qui sort du chaudron (codes de formatage possibles : tels que &6)
    ingredients: Liste des 'matériaux/montant'
      Avec un objet en main, utilisez /brew ItemName pour obtenir son matériau pour une recette de cuisine
      (Les id d'objets à la place des matériaux sont obsolètes pour bukkit)
      Une liste des matériaux peuvent-être trouvés ici: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/Material.html
    color : Couleur de la potion provenant d'un chaudron.
      Couleurs disponibles : DARK_RED, RED, BRIGHT_RED, ORANGE, YELLOW, PINK, PURPLE, BLUE, CYAN, WATER, TEAL, OLIVE, GREEN, LIME, BLACK, GREY, BRIGHT_GREY, WHITE
      (Dans l'ordre : Rouge foncé, Rouge, Rouge clair, Orange, Jaune, Rose, Pourpre, Bleu, Cyan, Eau, Sarcelle, Olive, Vert, Vert lime, Noir, Gris, Gris clair, Blanc)
    Ou couleurs RGB (hex: par exemple '99FF33') (avec '') (recherche de "HTML color" sur internet)
    cookParticles:
      Color of the Particles above the cauldron at different cooking-times
      Color and minute during which each color should appear, i.e. one color at 8 minutes fading to another at 18 minutes.
      As List, each Color as name or RGB, see above. Written as 'Color/Minute'
      It will fade to the last color in the end, if there is only one color in the list, it will fade to grey
    lore: Liste de texte supplémentaire sur la potion de base. (Formatting codes possible: such as &6)
    customModelData: Custom Model Data Tag. This is a number that can be used to add custom textures to the item.


customItemsFile:
  header: |
    -- Définir des objets personnalisés --
    
    L'id défini peut ensuite être utilisé dans les recettes

      matchAny: si c'est déjà assez si l'une des infos correspond
      material: le type d'article à utiliser
      name: Quel nom l'article doit porter (codes de formatage possibles : tels que &6)
      lore: Ce qui doit être dans la lore de l'objet
      customModelData: Custom Model Data Int. Whatever Model data number the item has to have in a list format